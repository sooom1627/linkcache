---
description: 
globs: *.md
alwaysApply: false
---
# Documentation Quality Principles

## 🎯 核心原則

### 実装ファースト・ドキュメンテーション
**「実装済み機能を正確に、実用的に文書化する」**

## 📋 品質基準

### 1. 実装との一致性
- ✅ **現在の実装を正確に反映**
- ✅ **動作するコード例のみ記載**
- ❌ 未実装機能の仕様書化
- ❌ 理論的な理想形の記載

### 2. 開発者の実用性
- ✅ **コピー&ペースト可能なコード**
- ✅ **実際の使用パターン**
- ✅ **トラブルシューティング**
- ❌ 抽象的な説明のみ

### 3. 情報の分離と整理
- ✅ **目的別ドキュメント分離**
- ✅ **対象読者の明確化**
- ❌ 仕様と進捗管理の混在
- ❌ 複数目的の混合ドキュメント

## 🚫 ドキュメント・アンチパターン

### ❌ 混合型ドキュメント
```
# 悪い例: 仕様とタスク管理が混在
## API仕様
- getProfile(): 実装済み ✅
- updateProfile(): 実装中 🚧
- deleteProfile(): TODO 📋

## 今後の予定
- Phase 2: 画像アップロード
- Phase 3: ソーシャル機能
```

### ✅ 分離型ドキュメント
```
# 良い例: API仕様のみに特化
## API仕様

### getProfile()
実装済み機能の詳細仕様とコード例...

### updateProfile()
実装済み機能の詳細仕様とコード例...
```

## 📖 ドキュメント・タイプ別品質基準

### Feature README.md
**目的**: 素早い概要把握
**品質基準**:
- [ ] 5分以内で機能を理解できる
- [ ] 基本的な使用例がある
- [ ] 実装状況が明確
- [ ] 詳細資料への誘導がある

### API Documentation
**目的**: 実装時のリファレンス
**品質基準**:
- [ ] 全実装済み関数を網羅
- [ ] TypeScript型定義を含む
- [ ] エラーハンドリング例がある
- [ ] React Query統合パターンがある

### Architecture Documentation
**目的**: システム理解・拡張指針
**品質基準**:
- [ ] 実際のディレクトリ構造
- [ ] 実装済み層の詳細
- [ ] データフロー図
- [ ] 設計決定の理由

### Security Documentation
**目的**: セキュリティ状況把握
**品質基準**:
- [ ] 実装済み対策の具体例
- [ ] 既知の制限事項
- [ ] 監査状況の記録
- [ ] 設定手順の詳細

### Sequence Documentation
**目的**: データフロー・相互作用の可視化
**品質基準**:
- [ ] 実装済み機能の正確なシーケンス
- [ ] Mermaid図での視覚的表現
- [ ] エラーケースのシーケンス
- [ ] 技術的考慮事項の記載

## 🔄 継続的品質改善

### 定期レビューポイント
1. **実装との乖離チェック**
   - コード変更時のドキュメント更新
   - 実装済み機能の正確な反映

2. **実用性の検証**
   - 新規開発者による使用テスト
   - よくある質問の反映

3. **情報の整理**
   - 不要な情報の削除
   - 重複情報の統合

### 品質改善アクション
```
実装変更 → ドキュメント更新 → レビュー → 公開
    ↑                                    ↓
フィードバック収集 ← 使用状況確認 ← 品質チェック
```

## 📏 量的品質指標

### ファイルサイズ管理
- **Feature README**: 200-400行（概要に適切）
- **API仕様**: 300-400行（詳細網羅）
- **アーキテクチャ**: 300-500行（設計詳細）
- **セキュリティ**: 300-400行（対策詳細）
- **シーケンス図**: 150-250行（可視化重視）

### コード例の比率
- ドキュメント全体の30-50%はコード例
- 全主要機能にコード例を提供
- 実際に動作することを検証済み

## 🎯 成功指標

### 開発者体験
- [ ] 新規開発者が30分で基本理解
- [ ] 実装時にドキュメントで完結
- [ ] トラブル時に解決方法が見つかる

### 保守性
- [ ] 実装変更時の更新が容易
- [ ] 重複情報の管理が不要
- [ ] 古い情報の蓄積がない

### 一貫性
- [ ] 全フィーチャーで統一構造
- [ ] 命名規則の統一
- [ ] 品質レベルの統一

## 🔧 実践ツール

### チェックリスト使用
機能完了時の必須確認項目:
- [ ] 実装との一致性確認
- [ ] コード例の動作確認
- [ ] 対象読者への適合性確認
- [ ] 既存ドキュメントとの整合性確認

### 参考実装
[src/features/user-profile](mdc:src/features/user-profile) の5ファイル構成
- 実装特化への転換例
- 品質向上の具体例
- 構造化の成功例
- 視覚的データフロー表現
